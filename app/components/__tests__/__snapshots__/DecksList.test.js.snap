// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`displays "No Decks available" message if no decks exist 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 6,
      "justifyContent": "center",
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    dataTestId="loading"
    ellipsizeMode="tail"
    style={
      Object {
        "fontSize": 20,
      }
    }
  >
    No Decks available to show.
  </Text>
  ;
</View>
`;

exports[`displays "loading" message while decks are not loaded 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 6,
      "justifyContent": "center",
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    dataTestId="loading"
    ellipsizeMode="tail"
    style={
      Object {
        "fontSize": 20,
      }
    }
  >
    Loading Decks...
  </Text>
  ;
</View>
`;

exports[`displays all decks when decks are loaded and exist 1`] = `
<RCTScrollView
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View>
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#f2f3f4",
          "flex": 1,
          "justifyContent": "center",
          "marginBottom": 4,
          "marginLeft": 4,
          "marginRight": 4,
          "minHeight": 180,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "center",
          }
        }
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Array [
              Object {
                "color": "#292477",
                "fontSize": 24,
                "fontWeight": "bold",
                "textAlign": "center",
              },
              Object {},
            ]
          }
        >
          React
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#757575",
              "fontSize": 20,
              "textAlign": "center",
            }
          }
        >
          2 cards
        </Text>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#292477",
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "space-around",
              "margin": 4,
              "marginTop": 10,
              "opacity": 1,
              "padding": 4,
              "width": 150,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#f2f3f4",
                "fontSize": 18,
              }
            }
          >
            View deck
          </Text>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#7c53c3",
              "flexDirection": "row",
              "height": 40,
              "justifyContent": "space-around",
              "margin": 4,
              "marginTop": 10,
              "opacity": 1,
              "padding": 4,
              "width": 150,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          />
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#f2f3f4",
                "fontSize": 18,
              }
            }
          >
            Delete deck
          </Text>
        </View>
      </View>
    </View>
    <Modal
      animationType="none"
      hardwareAccelerated={false}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onRequestClose={[Function]}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      swipeThreshold={100}
      transparent={true}
      visible={false}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hitSlop={undefined}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#000000",
            "bottom": 0,
            "height": 1334,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "width": 750,
          }
        }
        testID={undefined}
      />
      <View
        collapsable={undefined}
        hideModalContentWhileAnimating={false}
        onModalHide={[Function]}
        pointerEvents="box-none"
        scrollOffset={0}
        scrollOffsetMax={0}
        scrollTo={null}
        style={
          Object {
            "flex": 1,
            "justifyContent": "center",
            "margin": 37.5,
            "transform": Array [
              Object {
                "translateY": 0,
              },
            ],
          }
        }
        swipeThreshold={100}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "white",
              "borderColor": "rgba(0, 0, 0, 0.1)",
              "borderRadius": 4,
              "justifyContent": "center",
              "padding": 22,
            }
          }
        >
          <View>
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              Delete Deck?
            </Text>
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              collapsable={undefined}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#7c53c3",
                  "flexDirection": "row",
                  "height": 40,
                  "justifyContent": "space-around",
                  "margin": 4,
                  "marginTop": undefined,
                  "opacity": 1,
                  "padding": 4,
                  "width": 150,
                }
              }
              testID={undefined}
              tvParallaxProperties={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              >
                Delete
              </Text>
            </View>
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              collapsable={undefined}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#757575",
                  "flexDirection": "row",
                  "height": 40,
                  "justifyContent": "space-around",
                  "margin": 4,
                  "marginTop": undefined,
                  "opacity": 1,
                  "padding": 4,
                  "width": 150,
                }
              }
              testID={undefined}
              tvParallaxProperties={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
              >
                Cancel
              </Text>
            </View>
          </View>
        </View>
      </View>
    </Modal>
  </View>
</RCTScrollView>
`;

exports[`renders without crashing 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "flex": 6,
      "justifyContent": "center",
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    dataTestId="loading"
    ellipsizeMode="tail"
    style={
      Object {
        "fontSize": 20,
      }
    }
  >
    Loading Decks...
  </Text>
  ;
</View>
`;
