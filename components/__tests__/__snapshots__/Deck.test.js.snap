// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders Deck component without crashing 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#f2f3f4",
      "flex": 1,
      "justifyContent": "center",
      "marginBottom": 4,
      "marginLeft": 4,
      "marginRight": 4,
      "minHeight": 180,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "color": "#292477",
            "fontSize": 24,
            "fontWeight": "bold",
            "textAlign": "center",
          },
          Object {},
        ]
      }
    >
      React
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#757575",
          "fontSize": 20,
          "textAlign": "center",
        }
      }
    >
      2 cards
    </Text>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#292477",
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "space-around",
          "margin": 4,
          "marginTop": 20,
          "opacity": 1,
          "padding": 4,
          "width": 150,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "color": "#f2f3f4",
            "fontSize": 18,
          }
        }
      >
        View deck
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#7c53c3",
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "space-around",
          "margin": 4,
          "marginTop": 10,
          "opacity": 1,
          "padding": 4,
          "width": 150,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "color": "#f2f3f4",
            "fontSize": 18,
          }
        }
      >
        Delete deck
      </Text>
    </View>
  </View>
</View>
`;

exports[`renders deck 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#f2f3f4",
      "flex": 1,
      "justifyContent": "center",
      "marginBottom": 4,
      "marginLeft": 4,
      "marginRight": 4,
      "minHeight": 180,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Array [
          Object {
            "color": "#292477",
            "fontSize": 24,
            "fontWeight": "bold",
            "textAlign": "center",
          },
          Object {},
        ]
      }
    >
      React
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#757575",
          "fontSize": 20,
          "textAlign": "center",
        }
      }
    >
      2 cards
    </Text>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#292477",
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "space-around",
          "margin": 4,
          "marginTop": 20,
          "opacity": 1,
          "padding": 4,
          "width": 150,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "color": "#f2f3f4",
            "fontSize": 18,
          }
        }
      >
        View deck
      </Text>
    </View>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#7c53c3",
          "flexDirection": "row",
          "height": 40,
          "justifyContent": "space-around",
          "margin": 4,
          "marginTop": 10,
          "opacity": 1,
          "padding": 4,
          "width": 150,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Object {
            "color": "#f2f3f4",
            "fontSize": 18,
          }
        }
      >
        Delete deck
      </Text>
    </View>
  </View>
</View>
`;

exports[`renders no deck avaialble message when no deck exists 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#f2f3f4",
      "flex": 1,
      "justifyContent": "center",
      "marginBottom": 4,
      "marginLeft": 4,
      "marginRight": 4,
      "minHeight": 180,
    }
  }
>
  <Text
    accessible={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
  >
    No Deck exists
  </Text>
</View>
`;
